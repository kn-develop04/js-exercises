{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;AAAO;AACA;AACA;;;;;;;;;;;;;;;ACFP;AAC4C;AAC5C;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,aAAa;AAC1B;AACO;AACP;AACA;AACA,oBAAoB,MAAM,+CAAI,EAAE;AAChC,sBAAsB,MAAM,+CAAI,EAAE;AAClC;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B,yBAAyB,QAAQ;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+CAAI;AAC9B;AACA,0BAA0B,+CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9CA;AACwD;AACxD;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,0BAA0B;AACrC;AACO;AACP,oBAAoB,MAAM,+CAAI,EAAE;AAChC,sBAAsB,MAAM,+CAAI,EAAE;AAClC;AACA;AACA,qBAAqB,qDAAU,QAAQ,qDAAU,EAAE,qDAAU,EAAE,qDAAU;AACzE;AACA;AACA;AACA;AACA;AACA;;;;;;;UCnBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;AACA;AACwD;AACjB;AACE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,+CAAI,GAAG,qDAAU;AAChC,gBAAgB,+CAAI,GAAG,qDAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,+CAAI;AACzB;AACA;AACA,cAAc,+CAAI;AAClB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iCAAiC,qDAAU;AAC3C,iCAAiC,qDAAU;AAC3C;AACA;AACA,EAAE,sDAAU;AACZ,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,oDAAU;AACnB,EAAE,sDAAU;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,sDAAU","sources":["webpack://ch17/./ex05/constants.js","webpack://ch17/./ex05/grid.js","webpack://ch17/./ex05/render.js","webpack://ch17/webpack/bootstrap","webpack://ch17/webpack/runtime/define property getters","webpack://ch17/webpack/runtime/hasOwnProperty shorthand","webpack://ch17/webpack/runtime/make namespace object","webpack://ch17/./ex05/index.js"],"sourcesContent":["export const ROWS = 50;\r\nexport const COLS = 50;\r\nexport const RESOLUTION = 10;","// grid.js\r\nimport { ROWS, COLS } from './constants.js';\r\n\r\n/**\r\n * Life Game のルールに従ってセルを更新\r\n * @param {boolean[][]} grid - 現在の盤面\r\n * @returns {boolean[][]} 次の盤面\r\n */\r\nexport function updateGrid(grid) {\r\n  const nextGrid = grid.map((arr) => [...arr]);\r\n\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      // 周囲の生存セルを数える\r\n      let liveNeighbors = 0;\r\n\r\n      for (let i = -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n          // 自分自身はカウントしない\r\n          if (i === 0 && j === 0) continue;\r\n\r\n          const neighborRow = row + i;\r\n          const neighborCol = col + j;\r\n\r\n          // 有効なインデックス内かどうかを確認\r\n          if (\r\n            neighborRow >= 0 &&\r\n            neighborRow < ROWS &&\r\n            neighborCol >= 0 &&\r\n            neighborCol < COLS\r\n          ) {\r\n            liveNeighbors += grid[neighborRow][neighborCol] ? 1 : 0;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (grid[row][col]) {\r\n        // 生存セルのルール\r\n        nextGrid[row][col] = liveNeighbors === 2 || liveNeighbors === 3;\r\n      } else {\r\n        // 死亡セルのルール\r\n        nextGrid[row][col] = liveNeighbors === 3;\r\n      }\r\n    }\r\n  }\r\n  return nextGrid;\r\n}\r\n","// render.js\r\nimport { ROWS, COLS, RESOLUTION } from './constants.js';\r\n\r\n/**\r\n * grid を canvas に描画する\r\n * @param {boolean[][]} grid - 現在の盤面\r\n * @param {CanvasRenderingContext2D} ctx - canvas の描画コンテキスト\r\n */\r\nexport function renderGrid(grid, ctx) {\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      const cell = grid[row][col];\r\n      ctx.beginPath();\r\n      ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\r\n      ctx.fillStyle = cell ? \"black\" : \"white\";\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","//バンドルして実行：npx webpack-dev-server\r\n//ビルド：npx webpack --mode development\r\nimport { ROWS, COLS, RESOLUTION } from './constants.js';\r\nimport { updateGrid } from './grid.js';\r\nimport { renderGrid } from './render.js';\r\n\r\n// canvas のセットアップ\r\nconst canvas = document.querySelector(\"#screen\");\r\nconst ctx = canvas.getContext(\"2d\");\r\nconst startButton = document.querySelector(\"#start\");\r\nconst pauseButton = document.querySelector(\"#pause\");\r\n\r\ncanvas.width = ROWS * RESOLUTION;\r\ncanvas.height = COLS * RESOLUTION;\r\n\r\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame が返す ID\r\nlet animationId = null;\r\n\r\n// NOTE: download from https://soundeffect-lab.info/sound/button/mp3/decision1.mp3\r\nconst sound = new Audio(\"decision1.mp3\");\r\n\r\n// ライフゲームのセル (true or false) をランダムに初期化する\r\nlet grid = new Array(ROWS)\r\n  .fill(null)\r\n  .map(() =>\r\n    new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2)),\r\n  );\r\n\r\n// canvas がクリックされたときの処理 (セルの値を反転する)\r\ncanvas.addEventListener(\"click\", function (evt) {\r\n  const rect = canvas.getBoundingClientRect();\r\n  const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\r\n\r\n  const row = Math.floor(pos.y / RESOLUTION);\r\n  const col = Math.floor(pos.x / RESOLUTION);\r\n  grid[row][col] = !grid[row][col];\r\n  sound.cloneNode().play();\r\n  renderGrid(grid, ctx);\r\n});\r\n\r\n// requestAnimationFrame によって一定間隔で更新・描画を行う\r\n// NOTE: リフレッシュレートの高い画面では速く実行される (これを防ぐ場合は下記の例を参照)\r\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame\r\nfunction update() {\r\n  grid = updateGrid(grid);\r\n  renderGrid(grid, ctx);\r\n  animationId = requestAnimationFrame(update);\r\n}\r\n\r\nstartButton.addEventListener(\"click\", () => {\r\n  // 既にアニメーションが動いている場合は何もしない\r\n  if (animationId) {\r\n    return;\r\n  }\r\n  update();\r\n});\r\n\r\npauseButton.addEventListener(\"click\", () => {\r\n  // アニメーションが停止している場合は何もしない\r\n  if (!animationId) {\r\n    return;\r\n  }\r\n  cancelAnimationFrame(animationId);\r\n  animationId = null;\r\n});\r\n\r\nrenderGrid(grid, ctx);\r\n"],"names":[],"sourceRoot":""}